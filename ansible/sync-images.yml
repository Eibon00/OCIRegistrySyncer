---
- name: Sync container images from ghcr or Docker Hub
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../config/images.yml
    - ../config/vault.yml

  vars:
    _input_target_registry: "{{ target_registry | default('') }}"

  tasks:
    - name: Set actual target_registry
      set_fact:
        registry_host: >-
          {{
            (target_registry is defined and (target_registry | trim | length > 0))
              | ternary(target_registry, vault_registry_url)
              | regex_replace('^.+://', '')
          }}
        registry_is_https: >-
          {{ (_input_target_registry | default(vault_registry_url)) is search('^https://') }}

    - name: Ensure registry vars are loaded
      ansible.builtin.debug:
        msg: >-
          Connecting to registry: {{ registry_host }}
          ({{ 'HTTPS secure mode' if registry_is_https else 'HTTP insecure mode (no login)' }})

    - name: Log Yggdrasil setup attempt
      ansible.builtin.debug:
        msg: "Trying to setup Yggdrasil connectivity..."

    - name: Install and config Yggdrasil
      become: true
      import_tasks: tasks/setup_yggdrasil.yml

    - name: Login to target registry using Basic Auth
      community.docker.docker_login:
        registry_url: "{{ registry_host }}"
        username: "{{ vault_registry_username }}"
        password: "{{ vault_registry_password }}"
        reauthorize: yes
      when: registry_is_https

    - name: Pull each image from ghcr.io or docker.io
      ansible.builtin.shell: |
        if [[ "{{ item }}" == */* ]]; then
          docker pull {{ item }}
        else
          docker pull docker.io/{{ item }} || docker pull ghcr.io/{{ item }}
        fi
      loop: "{{ images }}"
      loop_control:
        label: "{{ item }}"
      register: pull_results
      changed_when: pull_results.rc != 0
      ignore_errors: yes
      failed_when: false

    - name: Print failed pulls
      ansible.builtin.debug:
        msg: "Pull failed for: {{ item.item }} (Exit code: {{ item.rc }})"
      loop: "{{ pull_results.results }}"
      when: item.rc != 0
      loop_control:
        label: "{{ item.item }}"

    - name: Tag and push images to target registry
      include_tasks: tasks/push_image.yml
      loop: "{{ images }}"
      loop_control:
        loop_var: image_name
        label: "{{ image_name }}"

    - name: Logout from target registry
      community.docker.docker_login:
        registry_url: "{{ registry_host }}"
        state: absent

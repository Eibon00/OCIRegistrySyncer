---
- name: Verify synchronized images in target registry
  hosts: localhost
  gather_facts: no
  vars_files:
    - ../config/vault.yml
    - ../config/images.yml

  vars:
    _input_target_registry: "{{ target_registry | default('') }}"
    summary_file: "{{ lookup('env', 'GITHUB_STEP_SUMMARY') | default('/tmp/github-summary.txt', true) }}"

  tasks:
    - name: Set actual target_registry
      set_fact:
        registry_url_raw: >-
          {{
            (_input_target_registry is defined and (_input_target_registry | trim | length > 0))
              | ternary(_input_target_registry, vault_registry_url)
          }}
        registry_host: "{{ registry_url_raw | regex_replace('^https?://', '') }}"
        registry_is_https: "{{ registry_url_raw is search('^https://') }}"
        registry_scheme: "{{ 'https' if registry_is_https else 'http' }}"

    - name: Show which registry is being verified
      ansible.builtin.debug:
        msg: >-
          Verifying registry: {{ registry_url_raw }}
          (mode: {{ 'HTTPS secure' if registry_is_https else 'HTTP insecure' }})

    - name: Install and config Yggdrasil
      become: true
      import_tasks: tasks/setup_yggdrasil.yml

    - name: Initialize counters
      set_fact:
        success_count: 0
        failure_count: 0
        verify_records: []

    - name: Verify each image via registry API
      include_tasks: tasks/verify_image.yml
      loop: "{{ images }}"
      loop_control:
        label: "{{ item }}"

    - name: Count success and failures
      set_fact:
        success_count: "{{ verify_records | selectattr('status', 'equalto', 200) | list | length }}"
        failure_count: "{{ verify_records | rejectattr('status', 'equalto', 200) | list | length }}"

    - name: Show verification summary
      ansible.builtin.debug:
        msg: |
          ✅ Verified images: {{ success_count }}
          ❌ Failed images: {{ failure_count }}

    - name: Log failed images for debugging
      ansible.builtin.debug:
        msg: "❌ Failed to verify: {{ item.image }} (status={{ item.status | default('N/A') }})"
      when: item.status | default(0) != 200
      loop: "{{ verify_records }}"
      loop_control:
        label: "{{ item.image }}"
      ignore_errors: yes

    - name: Write verification results to GitHub Actions summary
      ansible.builtin.copy:
        dest: "{{ summary_file }}"
        content: |
          ## 🧩 Registry Verification Summary

          **Target registry:** `{{ registry_url_raw }}`
          **Mode:** {{ 'HTTPS secure' if registry_is_https else 'HTTP insecure' }}

          ✅ **Verified images:** {{ success_count }}
          ❌ **Failed images:** {{ failure_count }}

          {% if failure_count | int > 0 %}
          ### ❌ Failed Images
          {% for item in verify_records if item.status != 200 %}
          - {{ item.image }} (status={{ item.status | default('N/A') }})
          {% endfor %}
          {% else %}
          ✅ All images verified successfully!
          {% endif %}

          _Generated at {{ ansible_date_time.iso8601 }}_
      when: summary_file is defined

name: Docker Image Sync

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
    paths:
      - "config/images.yml"
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      target_registry:
        description: "Where you want to sync images to. If not set, use the default registry in vault."
        required: false
        type: string

  schedule:
    - cron: "30 5 * * 1,3" #Runs at 05:30, only on Monday and Wednesday.

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  image-sync:
    outputs:
      final_registry: ${{ steps.registry.outputs.final_registry }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Ansible
        id: ansible
        uses: rishabhc32/install-ansible@v1.2.2
        with:
          python-version: "3.12"
          ansible-package: "ansible==12.0.0"

      - name: Determine and prepare target registry
        id: registry
        shell: bash
        run: |
          echo "🔐 Decrypting vault to get default registry..."
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > ~/vault_pass.txt
          ansible-vault view config/vault.yml --vault-password-file ~/vault_pass.txt > vault_decrypted.yml

          DEFAULT_REGISTRY=$(grep '^vault_registry_url:' vault_decrypted.yml | awk '{print $2}')

          if [[ -n "${{ github.event.inputs.target_registry }}" ]]; then
            FINAL_REGISTRY="${{ github.event.inputs.target_registry }}"
            echo "✅ Using user-provided registry: $FINAL_REGISTRY"
          else
            FINAL_REGISTRY="$DEFAULT_REGISTRY"
            echo "ℹ️ No registry provided, falling back to vault default: $FINAL_REGISTRY"
          fi

          HOST=$(echo "$FINAL_REGISTRY" | sed -E 's#^https?://##; s#^http?://##')
          echo "🧩 Registry host detected: $HOST"

          if echo "$FINAL_REGISTRY" | grep -q '^https://'; then
            IS_HTTPS=true
            echo "🔒 Detected HTTPS registry"
          else
            IS_HTTPS=false
            echo "⚠️ Detected HTTP (insecure) registry"
          fi

          echo "final_registry=$FINAL_REGISTRY" >> $GITHUB_OUTPUT
          echo "registry_host=$HOST" >> $GITHUB_OUTPUT
          echo "is_https=$IS_HTTPS" >> $GITHUB_OUTPUT

      - name: Log which registry is configured
        run: |
          echo "Docker is configured for registry: ${{ steps.registry.outputs.final_registry }}"
          if [[ "${{ steps.registry.outputs.is_https }}" == "true" ]]; then
            echo "✅ Secure HTTPS mode, no insecure registry configured."
          else
            echo "⚠️ Insecure HTTP registry detected: ${{ steps.registry.outputs.registry_host }}"
          fi

      - name: Setup Docker (HTTPS mode)
        if: ${{ steps.registry.outputs.is_https == 'true' }}
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "experimental": true,
              "features": {
                "buildkit": true
              }
            }

      - name: Setup Docker (HTTP insecure mode)
        if: ${{ steps.registry.outputs.is_https != 'true' }}
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "insecure-registries": [
                ${{ steps.registry.outputs.registry_host }}
              ],
              "experimental": true,
              "features": {
                "buildkit": true
              }
            }

      - name: Setup Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "insecure-registries": [
                ${{ steps.registry.outputs.is_https == 'true' && '""' || format('"%s"', steps.registry.outputs.registry_host) }}
              ],
              "experimental": true,
              "features": {
                "buildkit": true
              }
            }

      - name: Check if DockerHub credentials are set
        id: dockerhub-check
        run: |
          if [ -z "${{secrets.DOCKERHUB_USERNAME}}" ] && [ -z "${{secrets.DOCKERHUB_PASSWORD}}" ]; then
            echo "dockerhub_set=false" >> $GITHUB_OUTPUT
          else
            echo "dockerhub_set=true" >> $GITHUB_OUTPUT
          fi

      - name: Login to DockeHub (optional)
        if: ${{ steps.dockerhub-check.outputs.dockerhub_set == 'true' }}
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Ansible Playbook
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          ansible-playbook -i localhost, -c local ansible/sync-images.yml \
            -e "target_registry=${{ steps.registry.outputs.final_registry }}" \
            --vault-password-file <(echo "$ANSIBLE_VAULT_PASSWORD")

      - name: Export synced image list
        id: export
        run: |
          echo "synced_images=$(yq '.images | join(\",\")' config/images.yml)" >> $GITHUB_OUTPUT

  verify:
    needs: image-sync
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Ansible
        id: ansible
        uses: rishabhc32/install-ansible@v1.2.2
        with:
          python-version: "3.12"
          ansible-package: "ansible==12.0.0"

      - name: Run verification playbook
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          ansible-playbook ansible/verify-images.yml \
            -e "target_registry=${{ needs.image-sync.outputs.final_registry }}" \
            --vault-password-file <(echo "$ANSIBLE_VAULT_PASSWORD")
